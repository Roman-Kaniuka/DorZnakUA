{"@t":"2024-12-17T13:16:39.6332648Z","@mt":"Стійка марки:СКМ1.45 не була знайдена","@l":"Warning","@tr":"20cce17fe87f5e6176cc616e8bab39f0","@sp":"9ccb2a01415f8f62","ActionId":"ee98646e-8c7a-44c8-87d9-8fa8b512985c","ActionName":"DorZnakUA.Api.Controller.MetalRacksController.CalculateRackHeight (DorZnakUA.Api)","RequestId":"80000009-0003-fd00-b63f-84710c7967bb","RequestPath":"/api/v1/MetalRacks/calculate/2"}
{"@t":"2024-12-17T13:24:06.5714589Z","@mt":"Стійка марки:СКМ1.55 не була знайдена","@l":"Warning","@tr":"6af813be9b691be5a00a50dedfa1779b","@sp":"8eee5abff64664b2","ActionId":"ee98646e-8c7a-44c8-87d9-8fa8b512985c","ActionName":"DorZnakUA.Api.Controller.MetalRacksController.CalculateRackHeight (DorZnakUA.Api)","RequestId":"8000000d-0001-fd00-b63f-84710c7967bb","RequestPath":"/api/v1/MetalRacks/calculate/1"}
{"@t":"2024-12-17T13:25:18.0096403Z","@mt":"Стійка марки:СКМ3.35 не була знайдена","@l":"Warning","@tr":"703368bcbf4ce3e52342a48a76bb2512","@sp":"c4af2be2a64beec9","ActionId":"ee98646e-8c7a-44c8-87d9-8fa8b512985c","ActionName":"DorZnakUA.Api.Controller.MetalRacksController.CalculateRackHeight (DorZnakUA.Api)","RequestId":"8000000b-0003-fd00-b63f-84710c7967bb","RequestPath":"/api/v1/MetalRacks/calculate/3"}
{"@t":"2024-12-17T13:32:26.4746264Z","@mt":"Стійка марки:СКМ3.35 не була знайдена","@l":"Warning","@tr":"47a460dca0d24f80dbec1d58f42db1ec","@sp":"1046b2b3df483a57","ActionId":"ae5fbbb4-e0cd-4369-8737-2b94c9caf0b2","ActionName":"DorZnakUA.Api.Controller.MetalRacksController.CalculateRackHeight (DorZnakUA.Api)","RequestId":"80000009-0000-fd00-b63f-84710c7967bb","RequestPath":"/api/v1/MetalRacks/calculate/3"}
{"@t":"2024-12-17T13:35:11.1715543Z","@mt":"The instance of entity type 'MetalRack' cannot be tracked because another instance with the same key value for {'Id'} is already being tracked. When attaching existing entities, ensure that only one entity instance with a given key value is attached. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the conflicting key values.","@l":"Error","@x":"System.InvalidOperationException: The instance of entity type 'MetalRack' cannot be tracked because another instance with the same key value for {'Id'} is already being tracked. When attaching existing entities, ensure that only one entity instance with a given key value is attached. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the conflicting key values.\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.ThrowIdentityConflict(InternalEntityEntry entry)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(TKey key, InternalEntityEntry entry, Boolean updateDuplicate)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(TKey key, InternalEntityEntry entry)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(InternalEntityEntry entry)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTracking(InternalEntityEntry entry)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState oldState, EntityState newState, Boolean acceptChanges, Boolean modifyProperties)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState entityState, Boolean acceptChanges, Boolean modifyProperties, Nullable`1 forceStateWhenUnknownKey, Nullable`1 fallbackState)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.PaintAction(EntityEntryGraphNode`1 node)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.TraverseGraph[TState](EntityEntryGraphNode`1 node, Func`2 handleNode)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.AttachGraph(InternalEntityEntry rootEntry, EntityState targetState, EntityState storeGeneratedWithKeySetTargetState, Boolean forceStateWhenUnknownKey)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.NavigationReferenceChanged(InternalEntityEntry entry, INavigationBase navigationBase, Object oldValue, Object newValue)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.NavigationReferenceChanged(InternalEntityEntry entry, INavigation navigation, Object oldValue, Object newValue)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectNavigationChange(InternalEntityEntry entry, INavigationBase navigationBase)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.LocalDetectChanges(InternalEntityEntry entry)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectChanges(IStateManager stateManager)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges()\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.TryDetectChanges()\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Entries[TEntity]()\r\n   at DorZnakUA.DAL.Interceptors.DateInterceptor.SavingChangesAsync(DbContextEventData eventData, InterceptionResult`1 result, CancellationToken cancellationToken) in I:\\Р\\C#\\myProjecks\\DorZnakUA\\DorZnakUA.DAL\\Interceptors\\DateInterceptor.cs:line 18\r\n   at Microsoft.EntityFrameworkCore.Diagnostics.CoreLoggerExtensions.SaveChangesStartingAsync(IDiagnosticsLogger`1 diagnostics, DbContext context, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)\r\n   at DorZnakUA.DAL.Repositories.BaseRepository`1.SaveChangesAsync() in I:\\Р\\C#\\myProjecks\\DorZnakUA\\DorZnakUA.DAL\\Repositories\\BaseRepository.cs:line 54\r\n   at DorZnakUA.Application.Services.MetalRackService.CalculateRackHeightAsync(Int64 roadSignId) in I:\\Р\\C#\\myProjecks\\DorZnakUA\\DorZnakUA.Application\\Services\\MetalRackService.cs:line 363","@tr":"dd706e623c6b7b3bd027885a65c7f9fa","@sp":"72588a6b150e0d84","ActionId":"ae5fbbb4-e0cd-4369-8737-2b94c9caf0b2","ActionName":"DorZnakUA.Api.Controller.MetalRacksController.CalculateRackHeight (DorZnakUA.Api)","RequestId":"8000000e-0001-fe00-b63f-84710c7967bb","RequestPath":"/api/v1/MetalRacks/calculate/3"}
{"@t":"2024-12-17T16:22:33.8870284Z","@mt":"The instance of entity type 'MetalRack' cannot be tracked because another instance with the same key value for {'Id'} is already being tracked. When attaching existing entities, ensure that only one entity instance with a given key value is attached. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the conflicting key values.","@l":"Error","@x":"System.InvalidOperationException: The instance of entity type 'MetalRack' cannot be tracked because another instance with the same key value for {'Id'} is already being tracked. When attaching existing entities, ensure that only one entity instance with a given key value is attached. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the conflicting key values.\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.ThrowIdentityConflict(InternalEntityEntry entry)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(TKey key, InternalEntityEntry entry, Boolean updateDuplicate)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(TKey key, InternalEntityEntry entry)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(InternalEntityEntry entry)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTracking(InternalEntityEntry entry)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState oldState, EntityState newState, Boolean acceptChanges, Boolean modifyProperties)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState entityState, Boolean acceptChanges, Boolean modifyProperties, Nullable`1 forceStateWhenUnknownKey, Nullable`1 fallbackState)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.PaintAction(EntityEntryGraphNode`1 node)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.TraverseGraph[TState](EntityEntryGraphNode`1 node, Func`2 handleNode)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.AttachGraph(InternalEntityEntry rootEntry, EntityState targetState, EntityState storeGeneratedWithKeySetTargetState, Boolean forceStateWhenUnknownKey)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.NavigationReferenceChanged(InternalEntityEntry entry, INavigationBase navigationBase, Object oldValue, Object newValue)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.NavigationReferenceChanged(InternalEntityEntry entry, INavigation navigation, Object oldValue, Object newValue)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectNavigationChange(InternalEntityEntry entry, INavigationBase navigationBase)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.LocalDetectChanges(InternalEntityEntry entry)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectChanges(IStateManager stateManager)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges()\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.TryDetectChanges()\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Entries[TEntity]()\r\n   at DorZnakUA.DAL.Interceptors.DateInterceptor.SavingChangesAsync(DbContextEventData eventData, InterceptionResult`1 result, CancellationToken cancellationToken) in I:\\Р\\C#\\myProjecks\\DorZnakUA\\DorZnakUA.DAL\\Interceptors\\DateInterceptor.cs:line 18\r\n   at Microsoft.EntityFrameworkCore.Diagnostics.CoreLoggerExtensions.SaveChangesStartingAsync(IDiagnosticsLogger`1 diagnostics, DbContext context, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)\r\n   at DorZnakUA.DAL.Repositories.BaseRepository`1.SaveChangesAsync() in I:\\Р\\C#\\myProjecks\\DorZnakUA\\DorZnakUA.DAL\\Repositories\\BaseRepository.cs:line 54\r\n   at DorZnakUA.Application.Services.MetalRackService.CalculateRackHeightAsync(Int64 roadSignId) in I:\\Р\\C#\\myProjecks\\DorZnakUA\\DorZnakUA.Application\\Services\\MetalRackService.cs:line 363","@tr":"719c98c251be21cecd5e70e3e3fe6c45","@sp":"b8cf73e8d4d2a326","ActionId":"a523bff7-c83f-47e4-b480-51f51f2d3b79","ActionName":"DorZnakUA.Api.Controller.MetalRacksController.CalculateRackHeight (DorZnakUA.Api)","RequestId":"80000008-0001-fc00-b63f-84710c7967bb","RequestPath":"/api/v1/MetalRacks/calculate/3"}
{"@t":"2024-12-17T16:33:20.4889595Z","@mt":"Дорожній знак вже має цю стійку","@l":"Warning","@tr":"6bda11b72bc43734d257a099b704bf6d","@sp":"444d4949bfa1e199","ActionId":"81f08de3-fb57-4289-8c79-189713e915d6","ActionName":"DorZnakUA.Api.Controller.MetalRacksController.CalculateRackHeight (DorZnakUA.Api)","RequestId":"80000014-0001-fe00-b63f-84710c7967bb","RequestPath":"/api/v1/MetalRacks/calculate/3"}
{"@t":"2024-12-17T16:37:43.4074500Z","@mt":"Дорожній знак вже має цю стійку","@l":"Warning","@tr":"7cf18070426b2f43b8fc4106d4437b71","@sp":"97f67ababa11a8d6","ActionId":"55294ea1-7b94-4f35-9aee-92b9b7c86b67","ActionName":"DorZnakUA.Api.Controller.MetalRacksController.CalculateRackHeight (DorZnakUA.Api)","RequestId":"8000000e-0002-ff00-b63f-84710c7967bb","RequestPath":"/api/v1/MetalRacks/calculate-metal-rack/3"}
